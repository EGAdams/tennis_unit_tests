You are expected to be a top tier AI developer who is trying to write a program that will generate code for a project.

Do not leave any todos, fully implement every feature requested.

When writing code, add comments to explain what you intend to do and why it aligns with the program plan and specific instructions from the original prompt.  

Your Task will be to write a plan for us.
In the plan that you manke, please name and briefly describe the structure of the app we will be generating.

For each file that we generate, include the following pieces of information that can be shared between the files in the project that we are building:

-- header files,
-- defines,
-- constants,
-- variables, 
-- functions, 
-- methods,
-- class names
-- data schemas
-- any other pieces of information that you find being shared between files in the project that we are building

Respond only with plans following the above schema.

The app prompt is: 

# Mode1Score.cpp\n\nThis file contains the implementation of the `Mode1Score` class.\n\n## Class Definition\n\n### `Mode1Score`\n\n#### Constructors\n\n- `Mode1Score(IPlayer* player1, IPlayer* player2, PinInterface* pinInterface, GameState* gameState, History* history)`: Constructs a `Mode1Score` object with the given player objects, pin interface, game state, and history.\n\n#### Destructor\n\n- `~Mode1Score()`: Destructs the `Mode1Score` object.\n\n#### Public Methods\n\n- `void setScoreBoard(ScoreBoard* scoreBoard)`: Sets the score board for the `Mode1Score` object.\n- `void updateScore(IPlayer* currentPlayer)`: Updates the score for the current player.\n- `void mode1P1Score()`: Updates the score for player 1.\n- `void mode1P2Score()`: Updates the score for player 2.\n- `void mode1P1Games()`: Updates the games for player 1.\n- `void mode1P2Games()`: Updates the games for player 2.\n- `void mode1TBP1Games()`: Updates the games for player 1 in tie-break mode.\n- `void mode1SetTBP1Games()`: Updates the games for player 1 in set tie-break mode.\n- `void mode1TBP2Games()`: Updates the games for player 2 in tie-break mode.\n- `void mode1SetTBP2Games()`: Updates the games for player 2 in set tie-break mode.\n\n#### Private Methods\n\n- `_resetGame()`: Resets the game state.\n\n#### Private Members\n\n- `IPlayer* _player1`: Pointer to player 1 object.\n- `IPlayer* _player2`: Pointer to player 2 object.\n- `GameState* _gameState`: Pointer to the game state object.\n- `History* _history`: Pointer to the history object.\n- `Mode1TieBreaker _Mode1TieBreaker`: Instance of the `Mode1TieBreaker` class.\n- `PointLeds _pointLeds`: Instance of the `PointLeds` class.\n- `GameLeds _gameLeds`: Instance of the `GameLeds` class.\n- `SetLeds _setLeds`: Instance of the `SetLeds` class.\n- `Mode1WinSequences _mode1WinSequences`: Instance of the `Mode1WinSequences` class.\n- `Undo _undo`: Instance of the `Undo` class.\n- `ScoreBoard* _scoreBoard`: Pointer to the score board object.\n\n# Mode1Score.h\n\nThis file contains the declaration of the `Mode1Score` class.\n\n## Class Definition\n\n### `Mode1Score`\n\n#### Constructors\n\n- `Mode1Score(IPlayer* player1, IPlayer* player2, PinInterface* pinInterface, GameState* gameState, History* history)`: Constructs a `Mode1Score` object with the given player objects, pin interface, game state, and history.\n\n#### Destructor\n\n- `~Mode1Score()`: Destructs the `Mode1Score` object.\n\n#### Public Methods\n\n- `void setScoreBoard(ScoreBoard* scoreBoard)`: Sets the score board for the `Mode1Score` object.\n- `void updateScore(IPlayer* currentPlayer)`: Updates the score for the current player.\n- `void mode1P1Score()`: Updates the score for player 1.\n- `void mode1P2Score()`: Updates the score for player 2.\n- `void mode1P1Games()`: Updates the games for player 1.\n- `void mode1P2Games()`: Updates the games for player 2.\n- `void mode1TBP1Games()`: Updates the games for player 1 in tie-break mode.\n- `void mode1SetTBP1Games()`: Updates the games for player 1 in set tie-break mode.\n- `void mode1TBP2Games()`: Updates the games for player 2 in tie-break mode.\n- `void mode1SetTBP2Games()`: Updates the games for player 2 in set tie-break mode.\n\n#### Private Methods\n\n- `_resetGame()`: Resets the game state.\n\n#### Private Members\n\n- `IPlayer* _player1`: Pointer to player 1 object.\n- `IPlayer* _player2`: Pointer to player 2 object.\n- `GameState* _gameState`: Pointer to the game state object.\n- `History* _history`: Pointer to the history object.\n- `Mode1TieBreaker _Mode1TieBreaker`: Instance of the `Mode1TieBreaker` class.\n- `PointLeds _pointLeds`: Instance of the `PointLeds` class.\n- `GameLeds _gameLeds`: Instance of the `GameLeds` class.\n- `SetLeds _setLeds`: Instance of the `SetLeds` class.\n- `Mode1WinSequences _mode1WinSequences`: Instance of the `Mode1WinSequences` class.\n- `Undo _undo`: Instance of the `Undo` class.\n- `ScoreBoard* _scoreBoard`: Pointer to the score board object.\n\n# Mode1ScoreTest.cpp\n\nThis file contains the unit tests for the `Mode1Score` class.\n\n## Test Fixture\n\n### `Mode1ScoreTest`\n\n#### Protected Members\n\n- `MockPlayer player1`: Mock object of the `Player` class representing player 1.\n- `MockPlayer player2`: Mock object of the `Player` class representing player 2.\n- `MockPinInterface pinInterface`: Mock object of the `PinInterface` class.\n- `MockGameState gameState`: Mock object of the `GameState` class.\n- `MockHistory history`: Mock object of the `History` class.\n- `Mode1Score* mode1Score`: Pointer to the `Mode1Score` object being tested.\n\n#### Test Methods\n\n- `void SetUp()`: Set up the test fixture.\n- `void TearDown()`: Tear down the test fixture.\n\n## Test Cases\n\n### `Mode1P1ScoreTest`\n\n#### Test Method\n\n- `TEST(Mode1ScoreTest, Mode1P1ScoreTest)`\n\n#### Description\n\nThis test case verifies that the `mode1P1Score` method correctly updates the score for player 1.\n\n### `TestMode1P1Score_LessThan3Points`\n\n#### Test Method\n\n- `TEST_F(Mode1ScoreTest, TestMode1P1Score_LessThan3Points)`\n\n#### Description\n\nThis test case verifies that the `mode1P1Score` method does not update the score if the current player has less than 3 points.\n\n### `TestMode1P1Score_3Points_LessThan3PointsP2`\n\n#### Test Method\n\n- `TEST_F(Mode1ScoreTest, TestMode1P1Score_3Points_LessThan3PointsP2)`\n\n#### Description\n\nThis test case verifies that the `mode1P1Score` method updates the score for player 1 and player 2 if both players have 3 points.\n\n### `TestMode1P1Score_3Points_EqualPoints`\n\n#### Test Method\n\n- `TEST_F(Mode1ScoreTest, TestMode1P1Score_3Points_EqualPoints)`\n\n#### Description\n\nThis test case verifies that the `mode1P1Score` method updates the score for player 1 and player 2 if both players have 3 points.\n\n### `TestMode1P1Score_MoreThan3Points_DifferenceMoreThan1`\n\n#### Test Method\n\n- `TEST_F(Mode1ScoreTest, TestMode1P1Score_MoreThan3Points_DifferenceMoreThan1)`\n\n#### Description\n\nThis test case verifies that the `mode1P1Score` method updates the score for player 1 and increments the games if player 1 has more than 3 points and the difference between player 1's points and player 2's points is more than 1.\n\n### `TestMode1P1Score_4Points`\n\n#### Test Method\n\n- `TEST_F(Mode1ScoreTest, TestMode1P1Score_4Points)`\n\n#### Description\n\nThis test case verifies that the `mode1P1Score` method updates the score for player 1 and sets the point flash and toggle if player 1 has 4 points.\n\nThese are the main files and their contents that make up the program.  